%{
    #include <iostream>
    
    #include <cstring>

    #define YYDEBUG 1
    extern int yylex();
    
    extern int yylineno;
    extern char* yytext;
    
    

    int yyerror(char* message);
%}

%nonassoc IF
%nonassoc ELSE

%token LP
%token RP
%token LC
%token RC
%token SC
%token ASSIGN

%token INT
%token NIS
%token AGORA
%token PRINT
%token INPUT
%token<name> ID
%token<name> STRING
%token TRUE
%token FALSE

%token WHILE
%token BREAK
%token BOOL
%token<number> NUM

%right NOT

%left AND OR
%left SE GE EQ NEQ GT ST
%left PLUS MINUS
%left MULT DIV


%type<type> Type
%type<type> CoinType
%type<expInfo> Exp
%type<scopeData> Statement
%type<scopeData> Statements
%type<scopeData> S
%%

S	: Statements {}
	;
Statements	: Statements Statement {}
			| Statement {}
			;
			
Statement	: LC Statements RC {	}	/* { ... } */
			| Type ID SC { }	   	/* int x; */
						 
			| Type ID ASSIGN Exp SC {} /* int x = a+b; */
			| ID ASSIGN Exp SC {  }	   /* x = a+b; */
			| PRINT ID SC { }   	   /* print x; */
			| PRINT STRING SC {}	   /* print "bla bla"; */
			| INPUT ID SC {}  	   /* input x; */
			
			
			| IF LP Exp RP Statement %prec IF {  }   /* if ( x == 4 ) { ...} */
			| IF LP Exp RP Statement ELSE Statement %prec ELSE 											  
											 {  } 											  
			 /* if ( x == 4 ) { ...} else { ... } */ 
			
			| WHILE {addScope(WHILE_S);} LP Exp RP Statement {	} /* while ( x > 2 ) { ... } */
			| BREAK SC {}  /* break; */
			;

CoinType	: NIS {} /* NIS */
			| AGORA {} /* AGORA */
			;

Type		: CoinType {} 	    /* NIS */
		| INT {}   	    /* int */
		| BOOL {} 	    /* bool */
		;

Exp		: LP Exp RP {

					} 	    /* ( x < 4 ) */

/* Arithmetic Rules */					
					
		| Exp PLUS Exp {										

					   }   /* a + b */
		| Exp MINUS Exp {										
							
					    }   /* a - b */
		| Exp MULT Exp  {										
							
					    }    /* a * b */
		| Exp DIV Exp   {   }     /* a / b */
					    
/* Type rules and var names */					    
					    
		| ID {  }	      	    /* a */
		| NUM {}	    /* 4 */
		| NUM CoinType {}   /* 4 NIS */
		| TRUE {}	    /* True */
		| FALSE	{}	    /* False */
		
/* Boolean rules */
		
		| NOT Exp {  }	    /* not (x < 4) */
		| Exp OR Exp {	 }	    /* (x > 4) || (x < 5) */
		| Exp AND Exp {  }    /* (x > 4) && (x < 5) */
		| Exp Rel Exp %prec SE {  }    /* x < 4 */
		;

Rel		: GT {} /* > */
		| GE {} /* >= */
		| ST {} /* < */
		| SE {} /* <= */
		| EQ {} /* == */
		| NEQ {} /* != */
		;
%%

int main()
{
	yyparse();
}

int yyerror(char* message)
{
}


