%{
    #include <iostream>
    #include <ostringstream>
    #include <cstring>
    #include <vector>
    
    #include "shared.h"
    #include "bp.hpp"

    #define YYDEBUG 1
    extern int yylex();
    
    extern int yylineno;
    extern char* yytext;
    
    int yyerror(char* message);
    
    using namespace std;
    
    //static vector<int> memoryS;
    static int memoryS;
    
    typedef enum
    {
    	PLUS_A,
    	MINUS_A,
    	MUL_A,
    	DIV_A
    } ArithmeticOp;
    
    static string arithmeticOp(int lval, int op1, int op2, ArithmeticOp op )
    {
    	string ope;
    	if (op == PLUS_A)
    		ope = "+";
		else if (op == MINUS_A)
			ope = "-";
		else if (op == MUL_A)
			ope = "*";
		else
			ope = "/";
			
		ostringstream oss;
		oss << "s[" << lval << "]=" << "s[" << op1 << "]" << ope
			<< "s[" << op2 << "]";  
			
		return oss.str();  	
    }
    
    int getMemoryLocation();
%}

%nonassoc IF
%nonassoc ELSE

%token LP
%token RP
%token LC
%token RC
%token SC
%token ASSIGN

%token INT
%token NIS
%token AGORA
%token PRINT
%token INPUT
%token<varTraits> ID
%token<stringValue> STRING
%token TRUE
%token FALSE

%token WHILE
%token BREAK
%token BOOL
%token<numValue> NUM

%right NOT

%left AND OR
%left SE GE EQ NEQ GT ST
%left PLUS MINUS
%left MULT DIV


%type<typeTrait> Type
%type<typeTrait> CoinType
%type<expTraits> Exp
%type<statementList> Statement
%type<statementList> Statements
%type<statementList> S
%type<bufferLocation> M
%type<bufferLocation> N

%%

S	: Statements {}
	;
Statements	: Statements Statement {}
			| Statement {}
			;
			
Statement	: LC Statements RC {	}	/* { ... } */
			| Type ID SC {							
							addToSymbolTable(ID,Type,getMemoryLocation());
						 }	   	/* int x; */
						 
			| Type ID ASSIGN Exp SC {
										int offset = addToSymbolTable(ID,Type,getMemoryLocation());					
										ostringsteam oss;
										oss << "s[" << offset << "] = 
										emit(
									} /* int x = a+b; */
			| ID ASSIGN Exp SC {  }	   /* x = a+b; */
			| PRINT ID SC   { 
								ostringstream oss;
								oss << print s[" << getSymbolOffset($2) << "]";
								emit(oss.str());
							}   	   /* print x; */
			| PRINT STRING SC 	{
									ostringstream oss;
									oss << "print " << $2;
									emit(oss.str());
								}	   /* print "bla bla"; */
			| INPUT ID SC 	{
								ostringstream oss;
								oss << input s[" << getSymbolOffset($2) << "]";
								emit(oss.str());			
							}  	   /* input x; */
			
			
			| IF LP Exp RP Statement %prec IF {  }   /* if ( x == 4 ) { ...} */
			| IF LP Exp RP Statement ELSE Statement %prec ELSE 											  
											 {  } 											  
			 /* if ( x == 4 ) { ...} else { ... } */ 
			
			| WHILE {addScope(WHILE_S);} LP Exp RP Statement {	} /* while ( x > 2 ) { ... } */
			| BREAK SC {}  /* break; */
			;

CoinType	: NIS { $$ = NIS_T; } /* NIS */
			| AGORA { $$ = AGORA_T; } /* AGORA */
			;

Type		: CoinType { $$ = $1; } 	    /* NIS */
		| INT {	$$ = INT_T; }   	    /* int */
		| BOOL {$$ = BOOL_T; } 	    /* bool */
		;

Exp		: LP Exp RP {

					} 	    /* ( x < 4 ) */

/* Arithmetic Rules */					
					
		| Exp PLUS Exp {
							$$.memoryOffset = getMemoryLocation();
							emit(arithmeticOp($$.memoryOffset,$1.memoryOffset,$3.memoryOffset,PLUS_A);										
					   }   /* a + b */
		| Exp MINUS Exp {										
							$$.memoryOffset = getMemoryLocation();
							emit(arithmeticOp($$.memoryOffset,$1.memoryOffset,$3.memoryOffset,MINUS_A);							
					    }   /* a - b */
		| Exp MULT Exp  {										
							$$.memoryOffset = getMemoryLocation();
							emit(arithmeticOp($$.memoryOffset,$1.memoryOffset,$3.memoryOffset,MUL_A);							
					    }    /* a * b */
		| Exp DIV Exp   {
							$$.memoryOffset = getMemoryLocation();
							emit(arithmeticOp($$.memoryOffset,$1.memoryOffset,$3.memoryOffset,DIV_A);		   
						}     /* a / b */
					    
/* Type rules and var names */					    
					    
		| ID { $$ }	      	    /* a */
		| NUM {$$.varTraits.numValue = $1;}	    /* 4 */
		| NUM CoinType {
						$$.varTraits.numValue = $1;
						$$.varTraits.varType = $2
						}   /* 4 NIS */
		| TRUE {
				$$.varTraits.varType = BOOL_T;
				$$.varTraits.numValue = 1
				$$.trueList = makeList(next());
				}	    /* True */
		| FALSE	{
				$$.varTraits.varType = BOOL_T;
				$$.varTraits.numValue = 0;
				$$.falseList = makeList(next())		
				}	    /* False */
		
/* Boolean rules */
		
		| NOT Exp {  }	    /* not (x < 4) */
		| Exp OR Exp {	 }	    /* (x > 4) || (x < 5) */
		| Exp AND Exp {  }    /* (x > 4) && (x < 5) */
		| Exp Rel Exp %prec SE {  }    /* x < 4 */
		;

Rel		: GT {} /* > */
		| GE {} /* >= */
		| ST {} /* < */
		| SE {} /* <= */
		| EQ {} /* == */
		| NEQ {} /* != */
		;
		
M		:
		/*empty*/	{$$ = next();}
		;
		
N		:
		/* empty */	{
						$$ = next();
						emit("goto ");
					}		 		
%%

int main()
{
	yyparse();
}

int yyerror(char* message)
{
}

int getMemoryLocation()
{
	//memoryS.push_back(0);
	return (memoryS++) ;	
}
